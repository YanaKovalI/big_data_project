import requests

class SPARQLQueryDispatcher:
    def __init__(self, endpoint):
        self.endpoint = endpoint

    def query(self, sparql_query):
        full_url = f"{self.endpoint}?query={requests.utils.quote(sparql_query)}"
        headers = {'Accept': 'application/sparql-results+json'}
        response = requests.get(full_url, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"Request failed with status code: {response.status_code}")
            return None

# Endpoint URL
endpoint_url = 'https://query.wikidata.org/sparql'

label = "Berlin"
# SPARQL Query
sparql_query = f"""
  SELECT ?item ?itemLabel
  WHERE {{
    ?item rdfs:label "{label}"@en.
    SERVICE wikibase:label {{ bd:serviceParam wikibase:language "en". }}
  }}
"""
# Create an instance of SPARQLQueryDispatcher
query_dispatcher = SPARQLQueryDispatcher(endpoint_url)

# Execute the SPARQL query
query_results = query_dispatcher.query(sparql_query)

if query_results:
   items = query_results.get("results", {}).get("bindings", {})
   for item in items:
       print(item)
else:
    print("There was an issue with the query.")

#'results': {'bindings': [{'item'


